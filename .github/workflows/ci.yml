name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction
    
    - name: Lint with flake8
      run: |
        poetry run pip install flake8
        poetry run flake8 src tests
      continue-on-error: true  # Don't fail the build yet - we'll improve the code style over time
    
    - name: Check types with mypy
      run: |
        poetry run pip install mypy
        poetry run mypy src
      continue-on-error: true  # Don't fail the build yet - we'll add type hints over time
    
    - name: Test with pytest
      run: |
        poetry run pytest tests/
    
    - name: Generate coverage report
      run: |
        poetry run pytest --cov=ai_tools tests/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  build-binaries:
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: macos
            
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # Use a stable version for binary building
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Build binary
      run: |
        poetry run python build_binary.py --platform=${{ matrix.platform }}
    
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v3
      with:
        name: aitools-${{ matrix.platform }}
        path: |
          dist/*
        retention-days: 7